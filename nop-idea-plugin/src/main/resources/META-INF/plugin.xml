<idea-plugin>
    <id>io.entropy.idea.plugin</id>
    <name>Nop Entropy</name>
    <version>2.0</version>
    <vendor email="canonical_entropy@163.com" url="https://gitee.com/canonical-entropy/nop-entropy">Canonical</vendor>

    <description><![CDATA[
      1. 根据xdef元模型定义来校验dsl文件格式
      2. 为XPL模板语言提供调试功能
    ]]></description>

    <change-notes><![CDATA[

    ]]>
    </change-notes>

    <depends>com.intellij.modules.lang</depends>
    <depends>com.intellij.java</depends>
    <depends>com.intellij.gradle</depends>
    <depends>org.jetbrains.plugins.yaml</depends>

    <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
         on how to target different products -->
    <!-- uncomment to enable plugin in all products
    <depends>com.intellij.modules.lang</depends>
    -->

    <actions>
        <!--    <group id="entropy.ProjectFileActionGroup" text="Tasks For File"-->
        <!--           class="io.entropy.ide.plugin.actions.ProjectFileActionGroup" popup="true">-->
        <!--      <add-to-group group-id="ProjectViewPopupMenu" anchor="before" relative-to-action="FindUsages" />-->
        <!--    </group>-->

        <!--    <group id="entropy.EntropyPlatform" text="EntropyCloud" popup="true">-->
        <!--      <reference ref="entropy.ProjectFileActionGroup" />-->

        <!--      <separator />-->

        <!--      <group id="entropy.MainActionGroup" text="Entropy Tasks"-->
        <!--             class="io.entropy.ide.plugin.actions.MainActionGroup" >-->
        <!--      </group>-->

        <!--      <action id="entropy.RefreshConfig" text="RefreshConfig" class="io.entropy.ide.plugin.actions.RefreshConfigAction" />-->

        <!--      <add-to-group group-id="MainMenu" anchor="after" relative-to-action="ToolsMenu" />-->
        <!--    </group>-->
    </actions>

    <!--    <extensions defaultExtensionNs="com.intellij">-->
    <!--    <xml.elementDescriptorProvider implementation="io.entropy.ide.plugin.validate.XplElementDescriptorProvider" />-->
    <!--    <xml.tagNameProvider implementation="io.entropy.ide.plugin.completion.XplTagNameProvider"/> &lt;!&ndash;解决根节点的tagName提示的问题 &ndash;&gt;-->
    <!--    <xml.xmlExtension implementation="io.entropy.ide.plugin.validate.XplXmlExtension" />&lt;!&ndash; 结合XplElementDescriptorProvider使用，该参数用来做元素校验，可校验某节点下是否可存在某元素 &ndash;&gt;-->

    <!-- 根据xdef定义进行语法提示 -->
    <!--        <completion.contributor language="XLang"-->
    <!--                                implementationClass="io.nop.idea.plugin.completion.XLangCompletionContributor"/>-->

    <!--        <lang.documentationProvider language="XLang"-->
    <!--                                    implementationClass="io.nop.idea.plugin.doc.XLangDocumentationProvider"/>-->

    <!--    &lt;!&ndash; Add your extensions here &ndash;&gt;-->
    <!--    <gotoDeclarationHandler implementation="io.entropy.ide.plugin.link.XLibDeclationHandler" />&lt;!&ndash; 点击ctrl能够链接到lib文件 &ndash;&gt;-->
    <!--    <gotoDeclarationHandler implementation="io.entropy.ide.plugin.link.VueDeclarationHandler" />&lt;!&ndash; 点击ctrl能够链接到lib文件 &ndash;&gt;-->

    <!--    <lang.syntaxHighlighterFactory language="Xpl" implementationClass="io.entropy.ide.plugin.language.XplSyntaxHighlighterFactory"/>-->
    <!--    <multiHostInjector implementation="io.entropy.ide.plugin.language.XplLanguageInjector" />-->
    <!--    </extensions>-->

    <applicationListeners>
        <listener class="io.nop.idea.plugin.services.NopAppListener"
                  topic="com.intellij.ide.AppLifecycleListener"/>
    </applicationListeners>

    <extensions defaultExtensionNs="com.intellij">

        <projectService serviceImplementation="io.nop.idea.plugin.services.NopProjectService"/>

        <!-- XLang 注册与解析 -->
        <!-- 根据后缀名做直接绑定 -->
        <fileType name="XLang"
                  language="XLang"
                  implementationClass="io.nop.idea.plugin.lang.XLangFileType"
                  fieldName="INSTANCE"
                  extensions="xdef;xpl;xgen;xui;xlib;xrun;xwf;xmeta;xpage;xrule"/>
        <!-- 通过分析 xml 结构动态识别其是否为 XLang，避免穷举后缀，也避免遗漏 -->
        <lang.substitutor language="XML"
                          implementationClass="io.nop.idea.plugin.lang.XLangLanguageSubstitutor"/>
        <iconProvider implementation="io.nop.idea.plugin.lang.XLangIconProvider"
                      order="first"/>
        <!-- 解析 XLang 得到 PSI 树 -->
        <lang.parserDefinition language="XLang"
                               implementationClass="io.nop.idea.plugin.lang.XLangParserDefinition"/>
        <!-- 对 XLang DSL 进行语法校验 -->
        <annotator language="XLang"
                   implementationClass="io.nop.idea.plugin.annotator.XLangAnnotator"/>
        <highlightRangeExtension implementation="io.nop.idea.plugin.annotator.XLangHighlightRangeExtension"/>
        <!-- 对 XLang 做代码补全 -->
        <!--<completion.contributor language="XLang"
                                implementationClass="io.nop.idea.plugin.completion.XLangCompletionContributor"/>-->
        <!-- 显示 XLang 节点和属性的文档信息 -->
        <lang.documentationProvider language="XLang" order="first"
                                    implementationClass="io.nop.idea.plugin.doc.XLangDocumentationProvider"/>
        <!--<renamePsiElementProcessor implementation="io.nop.idea.plugin.lang.XLangElementRenameProcessor"/>-->

        <!-- XLang 调试 -->
        <xdebugger.breakpointType implementation="io.nop.idea.plugin.debugger.XLangBreakpointType"/>
        <programRunner id="XLangDebugger"
                       implementation="io.nop.idea.plugin.debugger.XLangDebuggerRunner"
                       order="before defaultDebugRunner"/>
        <executor id="xlangDebug"
                  implementation="io.nop.idea.plugin.execution.XLangDebugExecutor"
                  order="first,after run"/>
        <runConfigurationExtension
                implementation="io.nop.idea.plugin.debugger.XLangRunConfigurationExtension"/>

        <!-- XLang Script 注册与解析 -->
        <languageInjector implementation="io.nop.idea.plugin.lang.XLangScriptLanguageInjector"/>
        <fileType name="XLang Script"
                  language="XLangScript"
                  implementationClass="io.nop.idea.plugin.lang.script.XLangScriptFileType"
                  fieldName="INSTANCE"
                  extensions="xlangscript"/>
        <lang.parserDefinition language="XLangScript"
                               implementationClass="io.nop.idea.plugin.lang.script.XLangScriptParserDefinition"/>
        <lang.syntaxHighlighter language="XLangScript"
                                implementationClass="io.nop.idea.plugin.lang.script.XLangScriptSyntaxHighlighter"/>
        <lang.ast.factory language="XLangScript"
                          implementationClass="io.nop.idea.plugin.lang.script.XLangScriptASTFactory"/>
        <!-- Note: 可针对父类注册元素修改器 -->
        <lang.elementManipulator forClass="io.nop.idea.plugin.lang.script.psi.RuleSpecNode"
                                 implementationClass="io.nop.idea.plugin.lang.script.XLangScriptNodeManipulator"/>
        <renamePsiElementProcessor implementation="io.nop.idea.plugin.lang.script.XLangScriptNodeRenameProcessor"/>
    </extensions>
</idea-plugin>
