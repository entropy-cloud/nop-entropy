<?xml version="1.0" encoding="UTF-8"?>

<!--
导入不涉及到展现控制，仅仅需要考虑后台处理逻辑，因此比导出设计要简单的多。导入策略与导出策略可以共享objMeta上的信息。
@templatePath 空的导入模板文件。导出数据时也会使用这个模板
@xdef 解析得到的模型对象所对应的xdef元模型定义，用于将模型对象序列化为XML格式时使用
 -->
<imp defaultStripText="!boolean=true" xdef:name="ImportModel" xdef="v-path"
     xdef:bean-package="io.nop.excel.imp.model" ignoreUnknownSheet="!boolean=false"
     templatePath="v-path" resultType="generic-type" dump="!boolean=false" xdef:check-ns="imp,xpt"
     x:schema="/nop/schema/xdef.xdef" xmlns:x="/nop/schema/xdsl.xdef" xmlns:xdef="/nop/schema/xdef.xdef"
     xmlns:imp="imp" xmlns:xpt="xpt" bizObjName="string"
>

    <beforeParse xdef:value="xpl"/>
    <afterParse xdef:value="xpl"/>

    <xpt:beforeExpand xdef:value="xml"/>
    <xpt:afterExpand xdef:value="xml"/>

    <normalizeFieldsExpr xdef:value="xpl"/>

    <validator xdef:value="xpl"/>

    <sheets xdef:body-type="list" xdef:key-attr="name">
        <!--
        @name 匹配的sheet的名称
        @namePattern 正则表达式模式。用于匹配需要解析的对应sheet。如果无法通过name匹配，则会尝试按照namePattern来匹配
        @mandatory 当导入数据文件中不存在满足条件的sheet时，是否抛出异常
        @multiple 如果设置为true, 则有可能匹配到多个sheet, 否则只应该匹配到一个sheet。multiple和list不能同时为true
        @field 整个sheet的数据解析为一个字段。如果multiple=true，则field对应List类型，而sheet的数据解析为List中的一个条目。
        @list sheet中的数据是否为列表数据
        @noSeqCol 当list=true时，是否第一列不是序号列。如果不是序号列，则header之后一直到非空行都是数据行。
        -->
        <sheet name="!string" namePattern="regex" sheetNameProp="string" bizObjName="string"
               xdef:name="ImportSheetModel" resultType="generic-type" ignore="!boolean=false"
               multiple="!boolean=false" list="!boolean=false" mandatory="!boolean=false" displayMode="string"
               field="string" sheetVarName="string" keyProp="string" multipleAsMap="!boolean=false"
               imp:treeChildrenProp="string" imp:treeChildKeyProp="string" imp:treeLevelProp="string"
               xpt:defaultRowExtendForSibling="boolean" xpt:defaultColExtendForSibling="boolean"
               headerRowCount="!int=0" noSeqCol="!boolean=false" xpt:singleColLayout="boolean" alias="csv-set"
        >

            <description xdef:value="string"/>

            <parse xdef:value="xpl"/>

            <!--
            如果非空，则满足此条件时本sheet对应的导入操作才执行
            -->
            <when xdef:value="xpl-predicate"/>

            <!-- 在利用imp导入模板来作为Excel生成模板时使用。
                导入模板将被转换为xpt报表模板，然后利用NopReport报表引擎实现Excel导出。
                beforeExpand是作为报表导出时在报表执行交叉表展开之前需要执行的Xpl模板语言代码。
            -->
            <xpt:beforeExpand xdef:value="xml"/>
            <xpt:afterExpand xdef:value="xml"/>

            <fields xdef:body-type="list" xdef:key-attr="name">
                <!--
                @list [是否列表定义] 解析得到List类型，内部fields定义的是列表条目对象的属性。
                @keyProp 当list=true时，keyProp表示集合中每个对象采用这个属性作为唯一键。解析的得到的列表会使用KeyedList对象
                @computed [是否计算字段]计算字段不需要从文件读取，而是通过valueExpr计算
                @virtual 虚拟字段不会设置到实体上。只是会运行valueExpr表达式
                @prop 实际设置到record上的属性名，如果为空，则prop与name相同
                @ignoreWhenEmpty 当数据为空的时候自动忽略该字段，不设置到record对象上
                @groupField 列表表头中多个字段可能归属于一个分组字段，采用多级表头形式显示
                @noSeqCol 当list=true时，是否第一列不是序号列。如果不是序号列，则header之后一直到非空行都是数据行。
                @xpt:colWidth 自动生成Excel模板的时候列宽是多少
                -->
                <field name="!xml-name" xdef:name="ImportFieldModel" parentProp="string" typeProp="prop-name"
                       displayName="string" stripText="boolean" mandatory="!boolean=false" displayMode="string"
                       list="!boolean=false" computed="!boolean=false" virtual="!boolean=false" groupField="xml-name"
                       keyProp="string" alias="csv-set" prop="string" ignoreWhenEmpty="!boolean=false"
                       importDictLabel="!boolean=false"
                       xpt:formatExpr="string" xpt:exportFormula="boolean" xpt:exportFormattedValue="boolean"
                       xpt:rowExtendForSibling="boolean" xpt:colExtendForSibling="boolean"
                       xpt:labelColSize="int" xpt:valueColSize="int" xpt:singleColLayout="boolean"
                       imp:treeChildrenProp="string" imp:treeChildKeyProp="string" imp:treeLevelProp="string"
                       headerRowCount="!int=0" noSeqCol="!boolean=false" bizObjName="string"
                >
                    <when xdef:value="xpl-predicate"/>

                    <!--
                    Excel导出时缺省按照prop名称从相关对象上获取属性值导出。如果设置了valueExpr，则执行valueExpr来获取单元格的值
                    -->
                    <xpt:valueExpr xdef:value="xml"/>

                    <!--
                    导出数据时动态生成导出列
                    -->
                    <xpt:labelExpandExpr xdef:value="xml"/>

                    <xpt:labelValueExpr xdef:value="xml"/>

                    <xpt:labelStyleIdExpr xdef:value="xml"/>

                    <!-- 动态计算单元格对应的样式id。id需要在XptWorkbookModel这个sheet页中通过【命名样式】来定义 -->
                    <xpt:styleIdExpr xdef:value="xml"/>

                    <xpt:linkExpr xdef:value="xml"/>

                    <schema xdef:ref="/nop/schema/schema/schema.xdef"/>

                    <fields xdef:body-type="list" xdef:key-attr="name">
                        <field xdef:ref="ImportFieldModel"/>
                    </fields>

                    <!--
                    执行时上下文中存在record对象。
                    如果是对象字段，record对应于当前对象。对应简单字段，record对应于父对此昂
                    -->
                    <normalizeFieldsExpr xdef:value="xpl"/>

                    <fieldDecider xdef:value="xpl-fn:(fieldLabel,labelCell)=>string"/>

                    <unknownField xdef:ref="ImportFieldModel"/>

                    <valueExpr xdef:value="xpl"/>

                    <exportExpr xdef:value="xpl"/>

                </field>
            </fields>

            <!-- 动态确定Excel单元格所对应的field，返回field的name -->
            <fieldDecider xdef:value="xpl-fn:(fieldLabel,labelCell)=>string"/>

            <unknownField xdef:ref="ImportFieldModel"/>

            <normalizeFieldsExpr xdef:value="xpl"/>

            <beforeParse xdef:value="xpl"/>
            <afterParse xdef:value="xpl"/>
        </sheet>
    </sheets>

</imp>