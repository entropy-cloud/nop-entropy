<?xml version="1.0" encoding="UTF-8" ?>

<!--
定长记录的定义

@name 对应解析得到的属性名。如果指定了prop，则以prop为准
@prop 如果设置了此属性，则这个prop才是实际对应的属性名
@displayName 字段的显示名称。抛出用户可读的异常消息时可能会用到
@type 字段解析得到的java类型
@trim 解析得到值之后是否自动执行trim操作，去除padding字符。如果没有指定padding，则去除空格
@virtual 虚拟字段，不解析到java bean中。当它具有fields子字段时可以起到分组作用。fields子字段会作为父对象的字段
@varName 如果设置此属性，解析结果不会保存到实体属性，而是以指定名称存储到解析上下文中。后续字段可以通过上下文变量访问该值，常用于条件解析或字段间依赖处理
@offset 相对于上一个字段的偏移量。如果大于0，解析的时候会跳过指定个数的字符或者字节。从新的位置处开始解析
@length 缺省长度。如果padding不为空，则会补全到该长度
@padding 用于padding的字符
@includeTerminator 解析结果是否包含terminator
@terminator 读取到terminator判断字段结束
@skipWhenRead 当读取记录时忽略此字段，此字段可能仅用于输出
@content 如果非空，则表示字段为固定内容。当输出字段到数据文件中时直接使用该内容输出。 这里可以是直接的字符串，或者0xFFEE这种hex编码
@defaultValue 当值为空的时候，会使用这里的缺省值输出
@tillEnd 读取所有剩余部分
-->
<field x:schema="/nop/schema/xdef.xdef" xmlns:x="/nop/schema/xdsl.xdef"
       xmlns:xdef="/nop/schema/xdef.xdef"
       name="string" displayName="string" type="generic-type" prop="prop-name"
       length="!int=0" codec="string" charset="string"
       padding="encoded-bytes" leftPad="!boolean=false" trim="!boolean=true"
       offset="!int=0" virtual="!boolean=false" varName="var-name" format="string"
       content="encoded-bytes" defaultValue="any"
       mandatory="!boolean=false" endian="enum:io.nop.commons.bytes.EndianKind"
       skipWriteWhenEmpty="!boolean=false" skipWhenRead="!boolean=false" skipWhenWrite="!boolean=false"
       xdef:name="RecordSimpleFieldMeta" xdef:bean-package="io.nop.record.model"
       includeTerminator="!boolean=false" terminator="encoded-bytes"
       tillEnd="!boolean=false"
>
    <doc xdef:value="string"/>

    <schema xdef:ref="../schema/schema.xdef"/>

    <!--
    动态确定字段长度。在表达式中record指向父结构，_root指向根结构。
    -->
    <lengthExpr xdef:value="xpl-fn:(in,record,ctx)=>int"/>

    <!--
    当表达式返回false时，此字段将被跳过，不会被处理
    -->
    <writeWhen xdef:value="xpl-fn:(record,ctx)=>boolean"/>

    <readWhen xdef:value="xpl-fn:(in,record,ctx)=>boolean"/>

    <!-- 解析时对已经解析到的value进行转换  -->
    <transformIn xdef:value="xpl-fn:(record,value,ctx)=>any"/>

    <!-- 输出时不从实体上获取，根据表达式计算得到输出值 -->
    <transformOut xdef:value="xpl-fn:(record,value,ctx)=>any"/>

    <parseExpr xdef:value="xpl-fn:(in,record,ctx)=>any"/>

    <!-- 导出时通过此表达式获取值，而不是通过prop获取值 -->
    <exportExpr xdef:value="xpl-fn:(record,ctx)=>any"/>

</field>