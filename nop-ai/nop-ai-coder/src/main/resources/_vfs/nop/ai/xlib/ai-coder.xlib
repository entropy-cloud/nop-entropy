<?xml version="1.0" encoding="UTF-8" ?>

<lib x:schema="/nop/schema/xlib.xdef" xmlns:x="/nop/schema/xdsl.xdef" xmlns:c="c">

    <tags>

        <ValidateDslNode>
            <description>根据XDef元模型验证dslNode节点满足格式要求</description>
            <attr name="xdefPath" stdDomain="v-path" mandatory="true"/>
            <attr name="dslNode" mandatory="true"/>
            <attr name="removeUnknownAttrs" stdDomain="boolean" optional="true">
                <description>是否移除dslNode节点上未知的属性</description>
            </attr>

            <source><![CDATA[
                import io.nop.ai.coder.utils.AiCoderHelper;
                return AiCoderHelper.validateDslNode(xdefPath, dslNode, removeUnknownAttrs ?? true);
            ]]></source>
        </ValidateDslNode>

        <CleanDslNode>
            <description>根据XDef元模型，清理dslNode节点上未知的属性</description>
            <attr name="xdefPath" stdDomain="v-path" mandatory="true"/>
            <attr name="dslNode" mandatory="true"/>

            <source><![CDATA[
               import io.nop.ai.coder.utils.AiCoderHelper;
               return AiCoderHelper.cleanDslNode(xdefPath, dslNode);
            ]]></source>
        </CleanDslNode>

        <ExtractDslNode>
            <description>根据XDef元模型，选择dslNode节点上部分节点和属性</description>
            <attr name="xdefPath" stdDomain="v-path" mandatory="true"/>
            <attr name="dslNode" mandatory="true"/>

            <source><![CDATA[
               import io.nop.ai.coder.utils.AiCoderHelper;
               return AiCoderHelper.extractDslNode(xdefPath, dslNode);
            ]]></source>
        </ExtractDslNode>

        <CleanAndValidateDslNode>
            <description>根据XDef元模型，验证dslNode节点满足格式要求，并清理dslNode节点上未知的属性</description>
            <attr name="xdefPath" stdDomain="v-path" mandatory="true"/>
            <attr name="dslNode" mandatory="true"/>

            <source><![CDATA[
               import io.nop.ai.coder.utils.AiCoderHelper;
               return AiCoderHelper.cleanAndValidateDslNode(xdefPath, dslNode);
            ]]></source>
        </CleanAndValidateDslNode>

        <MergeDslNode>
            <attr name="xdefPath" stdDomain="v-path" mandatory="true"/>
            <attr name="dslNodeA" mandatory="true"/>
            <attr name="dslNodeB" mandatory="true"/>

            <source><![CDATA[
               import io.nop.ai.coder.utils.AiCoderHelper;
               return AiCoderHelper.mergeDslNode(xdefPath, dslNodeA,dslNodeB);
            ]]></source>
        </MergeDslNode>

        <SaveDslModelAsExcel>
            <attr name="impModelPath" stdDomain="v-path" mandatory="true"/>
            <attr name="fileName" mandatory="true"/>
            <attr name="dslModel" mandatory="true"/>
            <attr name="outputDir" optional="true"/>

            <source><![CDATA[
                import io.nop.report.core.util.ExcelReportHelper;
                import io.nop.core.resource.ResourceHelper;

                const resource = ResourceHelper.resolveResourceInDir(outputDir, fileName);

                ExcelReportHelper.saveXlsxObject(impModelPath, resource, dslModel);
            ]]></source>
        </SaveDslModelAsExcel>

        <SaveDslModelAsXml>
            <attr name="xdefPath" stdDomain="v-path" mandatory="true"/>
            <attr name="fileName" mandatory="true"/>
            <attr name="dslModel" mandatory="true"/>
            <attr name="outputDir" optional="true"/>

            <source><![CDATA[
                import io.nop.xlang.xdsl.DslModelHelper;
                import io.nop.core.resource.ResourceHelper;

                const resource = ResourceHelper.resolveResourceInDir(outputDir, fileName);

                DslModelHelper.saveDslModel(xdefPath, dslModel,resource);
            ]]></source>
        </SaveDslModelAsXml>

        <SaveDslNode>
            <attr name="xdefPath" stdDomain="v-path" mandatory="true"/>
            <attr name="fileName" mandatory="true"/>
            <attr name="dslNode" mandatory="true"/>
            <attr name="outputDir" optional="true"/>

            <source><![CDATA[
                import io.nop.ai.coder.utils.AiCoderHelper
                import io.nop.core.resource.ResourceHelper;

                const resource = ResourceHelper.resolveResourceInDir(outputDir, fileName);

                AiCoderHelper.saveDslNode(xdefPath, dslNode,resource);
            ]]></source>

        </SaveDslNode>

        <ParseDslNode>
            <attr name="xdefPath" stdDomain="v-path" mandatory="true"/>
            <attr name="dslNode" mandatory="true"/>

            <source>
                import io.nop.ai.coder.utils.AiCoderHelper;
                return AiCoderHelper.parseDslNode(xdefPath, dslNode);
            </source>
        </ParseDslNode>

        <SaveDslNodeAsYaml>
            <attr name="xdefPath" stdDomain="v-path" mandatory="true"/>
            <attr name="fileName" mandatory="true"/>
            <attr name="dslNode" mandatory="true"/>
            <attr name="outputDir" optional="true"/>

            <source><![CDATA[
                import io.nop.ai.coder.utils.AiCoderHelper
                import io.nop.core.resource.ResourceHelper;

                const resource = ResourceHelper.resolveResourceInDir(outputDir, fileName);

                AiCoderHelper.saveDslNodeAsYaml(xdefPath, dslNode,resource);
            ]]></source>

        </SaveDslNodeAsYaml>

        <SaveDslModelAsYaml>
            <attr name="xdefPath" stdDomain="v-path" mandatory="true"/>
            <attr name="fileName" mandatory="true"/>
            <attr name="dslModel" mandatory="true"/>
            <attr name="outputDir" optional="true"/>

            <source><![CDATA[
                import io.nop.ai.coder.utils.AiCoderHelper
                import io.nop.core.resource.ResourceHelper;

                const resource = ResourceHelper.resolveResourceInDir(outputDir, fileName);

                AiCoderHelper.saveDslModelAsYaml(dslModel,resource);
            ]]></source>

        </SaveDslModelAsYaml>

        <LoadDslModel>
            <attr name="fileName" mandatory="true"/>
            <attr name="inputDir" optional="true"/>

            <source>
                import io.nop.core.resource.ResourceHelper;
                import io.nop.xlang.xdsl.DslModelHelper;

                const resource = ResourceHelper.resolveResourceInDir(inputDir, fileName);
                return DslModelHelper.loadDslModel(resource.path);
            </source>
        </LoadDslModel>

        <LoadMarkdown>
            <attr name="fileName" mandatory="true"/>
            <attr name="inputDir" optional="true"/>
            <attr name="tplPath" stdDomain="v-path" optional="true"/>
            <attr name="loadDocumentExt" stdDomain="boolean" optional="true"/>
            <attr name="sectionExtTplPath" stdDomain="v-path" optional="true"/>

            <source><![CDATA[
                import io.nop.markdown.utils.MarkdownTool;
                import io.nop.core.resource.ResourceHelper;

                const resource = ResourceHelper.resolveResourceInDir(inputDir, fileName);

                const doc = MarkdownTool.instance().parseFromResource(resource);
                if(tplPath){
                    doc.matchTplFromPath(tplPath,true);
                }

                if(loadDocumentExt){
                    const ext = MarkdownTool.instance().loadDocumentExt(doc);
                    if(sectionExtTplPath){
                        ext.matchTplForSection(sectionExtTplPath,true);
                    }
                    ext.mergeToDocument(doc);
                }
                return doc;
            ]]>
            </source>
        </LoadMarkdown>

        <LoadOrmModel>
            <attr name="fileName" mandatory="true"/>
            <attr name="inputDir" optional="true"/>

            <source><![CDATA[
                import io.nop.core.resource.ResourceHelper;
                import io.nop.ai.coder.orm.AiOrmModel;

                const resource = ResourceHelper.resolveResourceInDir(inputDir, fileName);

                return AiOrmModel.buildFromOrmModelPath(resource.path);
            ]]></source>
        </LoadOrmModel>

        <LoadApiModel>
            <attr name="fileName" mandatory="true"/>
            <attr name="inputDir" optional="true"/>

            <source><![CDATA[
                import io.nop.core.resource.ResourceHelper;
                import io.nop.ai.coder.service.AiApiModel;

                const resource = ResourceHelper.resolveResourceInDir(inputDir, fileName);

                return AiApiModel.buildFromApiModelPath(resource.path);
            ]]></source>
        </LoadApiModel>

        <IncludeText outputMode="text">
            <attr name="fileName" mandatory="true"/>
            <attr name="inputDir" optional="true"/>

            <source>
                <c:script><![CDATA[
                import io.nop.core.resource.ResourceHelper;

                const resource = ResourceHelper.resolveResourceInDir(inputDir, fileName);
                $out.text(resource.location(), resource.readText(null));
            ]]></c:script>
            </source>
        </IncludeText>

        <RunCodeGen>
            <attr name="template" stdDomain="v-path" mandatory="true"/>
            <attr name="args" optional="true"/>
            <attr name="outputDir" stdDomain="string" implicit="true"/>

            <source><![CDATA[
                import io.nop.codegen.XCodeGenerator;

                const codeGen = new XCodeGenerator(template, outputDir);
                codeGen.execute("/", args || {}, $scope);
            ]]></source>
        </RunCodeGen>

        <ReadFileContents>
            <attr name="filePaths" mandatory="true"/>
            <attr name="inputDir" mandatory="true"/>

            <source>
                <c:script><![CDATA[
                import io.nop.core.resource.ResourceHelper;
                import io.nop.commons.util.FileHelper;
                import io.nop.ai.core.file.LocalFileOperator;

                const dir = FileHelper.resolveFile(inputDir.toString());
                const fileOperator = new LocalFileOperator(dir);
                return fileOperator.readFileContents(filePaths);
            ]]></c:script>
            </source>
        </ReadFileContents>
    </tags>
</lib>