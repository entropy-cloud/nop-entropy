A developer on your team has been working on the task described in previous message. Based on those instructions, the developer has made changes to file `{{ file_name }}`.

Here is the original content of this file:
```
{{ old_content }}
```

Here is the diff of the changes:

{% for hunk in hunks %}## Hunk {{ loop.index }}
```diff
{{ hunk }}
```
{% endfor %}

As you can see, there {% if hunks|length == 1 %}is only one hunk in this diff, and it{% else %}are {{hunks|length}} hunks in this diff, and each{% endif %} starts with the `@@` header line.

Think carefully about the instructions and review the proposed changes. For each hunk of change, provide a detailed rationale, and decide whether it should be:
* applied - if the change is correct
* ignored - for example if it is a code deletion or change that wasn't asked for
* reworked - if the change does something correctly but also makes a serious mistake, in which case both applying and ignoring the entire hunk would be incorrect

Finally, if the changes miss something that was in the instructions, mention that. Keep in mind you're just reviewing one file, `{{ file_name }}`. You don't need to consider if other files are created, dependent packages installed, etc. Focus only on reviewing the changes in this file based on the instructions in the previous message.

Note that the developer may add, modify or delete logging (including `gpt_pilot_debugging_log`) or error handling that's not explicitly asked for, but is a part of good development practice. Unless these logging and error handling additions break something, your decision to apply, ignore or rework the hunk should not be based on this. Base your decision only on functional changes - comments or logging are less important. Importantly, don't ask for a rework just because of logging or error handling changes. Also, take into account this is a junior developer and while the approach they take may not be the best practice, if it's not *wrong*, let it pass. Ask for rework only if the change is clearly bad and would break something.

Here is an example output if 2 of 4 hunks in the change should be applied, one of them should be ignored, one should be reworked, and no other changes are needed:
```
{
    "hunks": [
        {
            "number": 1,
            "reason": "Some explanation why this part of the change is important. The reasoning here should be as detailed as possible as that will help you reach the correct conclusion.",
            "decision": "apply"
        },
        {
            "number": 2,
            "reason": "Another explanation, for the 2nd hunk",
            "decision": "apply"
        },
        {
            "number": 3,
            "reason": "This hunk accidentally deletes important code without any useful change",
            "decision": "ignore"
        },
        {
            "number": 4,
            "reason": "This hunk does something correctly but also does something really wrong. It would be incorrect to either apply or ignore it fully, so it should be reworked.",
            "decision": "rework"
        },
    ],
    "review_notes": "General review notes, if something is missing from the change you can comment about it here"
}
```

IMPORTANT: The developer that wrote this is sloppy and has probably deleted some parts of the code that should not be deleted. Pay special attention to that in your review!
